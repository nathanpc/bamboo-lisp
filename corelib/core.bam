;;; core.bam
;;; Some extremely important and useful core functions for the Bamboo Lisp
;;; implementation.
;;;
;;; Author: Nathan Campos <nathan@innoveworkshop.com>

;;
;; Basic car/cdr combination shorthands.
;;

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))

;;
;; Folding, mapping, and the almighty quasiquotation.
;;

(define (foldl proc init list)
  (if (not (nil? list))
	  (foldl proc
			 (proc init (car list))
			 (cdr list))
	  init))

(define (foldr proc init list)
  (if (not (nil? list))
	  (proc (car list)
			(foldr proc init (cdr list)))
	  init))

(define (unary-map proc list)
  (foldr (lambda (x rest) (cons (proc x) rest))
		 nil
		 list))

(define (map proc . arg-lists)
  (if (not (nil? (car arg-lists)))
	  (cons (apply proc (unary-map car arg-lists))
			(apply map (cons proc
							 (unary-map cdr arg-lists))))
	  nil))

(define-macro (quasiquote x)
  (if (pair? x)
      (if (eq? (car x) 'unquote)
          (cadr x)
          (if (eq? (caar x) 'unquote-splicing)
              (list 'append
                    (cadr (car x))
                    (list 'quasiquote (cdr x)))
              (list 'cons
                    (list 'quasiquote (car x))
                    (list 'quasiquote (cdr x)))))
      (list 'quote x)))

;;
;; Common Lisp aliases.

(define-macro (defmacro name args . body)
  `(define-macro (,name ,@args)
	 ,@body))

(define-macro (defun name args . body)
  `(define ,name (lambda (,@args)
				   ,@body)))

;;
;; Program control flow.
;;

(define-macro (begin . body)
  `((lambda () ,@body)))

(define-macro (cond . clauses)
  (if clauses
      (let ((test (caar clauses))
           (body (cdar clauses)))
           `(if ,test
                (begin ,@body)
                (cond ,@(cdr clauses))))
      nil))

(define-macro (let defs . body)
  `((lambda ,(map car defs) ,@body)
    ,@(map cadr defs)))

(define-macro (unless test . body)
  `(when (not ,test) ,@body))

(define-macro (when test . body)
  `(if ,test (begin ,@body) nil))

;;
;; List manipulation.
;;

(define (list . items)
  (foldr cons nil items))

(define (append a b) (foldr cons b a))

(define (reverse list)
  (foldl (lambda (a x) (cons x a)) nil list))

(define (for-each proc . arg-lists)
  (when (not (nil? (car arg-lists)))
    (apply proc (map car arg-lists))
    (apply for-each
           (append (list proc)
                   (map cdr arg-lists)))))

(define (length list)
  (foldl (lambda (count x) (+ count 1)) 0 list))

(define (list-ref x k)
  (car (list-tail x k)))

(define (list-tail x k)
  (if (= k 0)
      x
      (list-tail (cdr x) (- k 1))))

;;
;; Type checking.
;;

(define (list? x)
  (or (null? x)
      (and (pair? x)
           (list? (cdr x)))))

#t
